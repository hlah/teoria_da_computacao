// quest o 1.c. f(x) retorna o n mero de 1 s na representa  o bin ria de x.
//Por exemplo,               
// f(2) = 1, f(6) = 2, f(11) = 3 e f(15) = 4.

// limpa registrador A
operation clear(A){
1: if zero A then goto 0 else goto 2
2: do dec A goto 1
}

// move B para A, zerando B
operation move(A,B) {
1: do clear(A) goto 2
2: if zero B then goto 0 else goto 3
3: do inc A goto 4
4: do dec B goto 2
}

// copia B para A, usando C
operation copy(A,B,C) {
 1: do clear(C) goto 2
 2: do clear(A) goto 3
 3: if zero B then goto 7 else goto 4
 4: do inc A goto 5
 5: do inc C goto 6
 6: do dec B goto 3
 7: do move(B,C) goto 0
}


// compara ao A < B, usando C e D
test lt(A,B,C,D,E) {
a: do clear(E) goto 1
1: do copy(C,A,E) goto 2
2: do copy(D,B,E) goto 3
3: if zero D then goto false else goto 4
4: if zero C then goto true else goto 5
5: do dec D goto 6
6: do dec C goto 3
}


// subtra  o A = A - B, usando C
operation sub(A,B,C) {
1: do clear (C) goto 2
2: if zero B then goto 6 else goto 3
3: do dec B goto 4
4: do dec A goto 5
5: do inc C goto 2
6: do move(B,C) goto 0
}


// divis o A = A/B, resto em C, usando D, E, e F
operation div(A,B,C,D,E,F) {
1: do move(C,A) goto 2
2: if lt(C,B,D,E,F) then goto 0 else goto 3
3: do sub(C,B,D) goto 4
4: do inc A goto 2
}

//A:= numero de 1's de A, usando B,C,D,E,F
operation ones_of_base2(A,B,C,D,E,F){
1: do move(B, A) goto 2
2: do add DOIS 2 goto 3
3: do div(B, DOIS, C, D, E, F ) goto 4
4: if zero C then goto 6 else goto 5
5: do inc A goto 6
6: if zero B then goto 0 else goto 3
}


main {
 1: do move(numero, X) goto 2
 2: do ones_of_base2(numero,T1,T2,T3,T4,T5) goto 3
 3: do move(Y, numero) goto 0
}