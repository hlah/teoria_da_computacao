let
-------------- Definições ----------------
-- Combinador Y --
Y = \f.(\x.f (x x))(\x.f(x x));

-- operações lógicas --
true          = (\a.\b. a);
false         = (\a.\b. b);
if            = (\c.\a.\b. c a b);
not      = (\a.a false true);
and      = (\a.\b. a b false);
or       = (\a.\b. a true b);

-- tuplas e listas --
pair       = (\a.\b.\s.s a b);
first      = (\l. l true);
second     = (\l. l false);
empty      = (\a.true);
cons       = pair;
head       = first;
tail       = second;
is_empty   = (\l.l(\x.\y.false));

-- testes e operações aritiméticas --
zero      = false;
inc       = (\n.\f.\x.f (n f x));
add       = \a.\b.\x.\y.(a x)((b x) y);
mul       = \a.\b.\x. a (b x);
is_zero   = (\a.a (\x.false) true); 
shift_inc = (\p.(pair (second p) (inc (second p))));
dec       = (\a.(first (a shift_inc (pair 0 0))));

sub      = \m n. (n dec) m ;
less     = \m n. not (is_zero (sub n m)) ;
div      = Y (\M. \m n. if (less m n) zero (inc (M (sub m n) n))) ;
mod      = Y (\M. \m n. if (less m n) m (M (sub m n) n)) ;

-------------- soluções --------------
-- problema 1.a --
f1 = (\x.\y.(add (add x x) y));
-- problema 1.b --
f2 = (\p.(pair (second p) (first p)));
-- problema 1.c --
f3 = Y (\I.\l. if (is_empty l) 
                  0 
                  (add (head l) (I (tail l))));


inv= Y \M.\l1 l2. if (is_empty l1)  
                         l2
                         (M (tail l1) (cons (head l1) l2));
f4= \l.inv l empty;

f5= Y \M.\l1 l2. if (or (is_empty l1) (is_empty l2))
                (pair empty empty)
                (cons (pair (head l1) (head l2)) (M (tail l1) (tail l2)));

--Codificacao Padrao
ZeroCP   = \x.x;
succCP   = \n.(pair false n);
isZeroCP = \n. (first n) ;
predCP   = \n. (second n);

churchToCP = Y \M.\x. if (is_zero x) (\x.x) (pair false (M (dec x)));

repeatCP   = Y \M.\n f x. if (isZeroCP n) x
                                          (f (M (predCP n) f x));

evenCP     = \x. if (is_zero(mod (repeatCP x) 2)) true false;

addCP      = Y \M.\x y. if (isZeroCP x) y
                                        (pair false (M (predCP x) y));

multCP     = \x y.(churchToCP (mul (repeatCP x) (repeatCP y)));
   
halfCP     = \x. (churchToCP (div (repeatCP x) 2));      

in
halfCP (pair false (pair false \x.x))
